# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Create a signed version of the app"
  lane :signed_apk do

    # get version and build number from git
    # https://blog.uncommon.is/using-git-to-generate-versionname-and-versioncode-for-android-apps-aaa9fc2c96af
    versionName = sh("git describe --dirty").gsub(/\s+/, "")
    versionCode = sh("git rev-list --first-parent --count origin/master").gsub(/\s+/, "").to_i

    # build the release variant
    gradle(
      task: "assemble",
      build_type: "Release",
      print_command: false,
      # Gradle properties
      properties: {
        "android.injected.signing.store.file" => "fastlane/masterplan_keystore.jks",
        "android.injected.signing.store.password" => ENV['KEY_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
        "android.injected.signing.key.password" => ENV['KEY_PASSWORD'],
        "versionCode" => versionCode,
        "versionName" => versionName
      }    
    )

    puts "Created signed apk. VersionName: #{versionName}. VersionCode: #{versionCode}"

  end     

  desc "Upload a signed .apk to Fabric Beta service."
  lane :fabric do
    # upload to Beta by Crashlytics
    crashlytics(
      api_token: ENV['FABRIC_API_TOKEN'],
      build_secret: ENV['FABRIC_BUILD_SECRET']
    )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    signed_apk
    fabric
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Release a new release version and publish it"
  desc "passing a bump parameter"
  lane :release do |lane|

    # ensure clean master branch
    ensure_git_branch
    ensure_git_status_clean

    type = lane[:bump]
    old = last_git_tag
    newVersion = old
    old[0] = ''
    oldArr = old.split('.').map{|v| v.to_i}

    comments = changelog_from_git_commits(
      between: [last_git_tag, "HEAD"],
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false, 
      merge_commit_filtering: "exclude_merges" 
    )

    if type == "patch"
      newVersion = "#{oldArr[0]}.#{oldArr[1]}.#{oldArr[2] + 1}"
    elsif type == "minor"
      newVersion = "#{oldArr[0]}.#{oldArr[1] + 1}.0"
    elsif type == "major"
      newVersion = "#{oldArr[0] + 1}.0.0"
    end

    if newVersion == old
      UI.user_error!("Wrong release bump parameter. Enter: patch | minor | major")
    end  

    # create local tag
    add_git_tag(
      message: comments,
      tag: "v#{newVersion}",
      prefix: "v",
      build_number: newVersion
    )

    # create signed apk
    signed_apk

    # publish release into Github
    github_release = set_github_release(
      api_token: ENV["GITHUB_TOKEN"],
      repository_name: "monday8am/masterplan",
      name: "#{type.capitalize} version v#{newVersion}",
      tag_name: "v#{newVersion}",
      description: comments,
      commitish: "master",
      upload_assets: [lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]]
    )

    # publis release into Fabric Beta
    fabric

  end  

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
